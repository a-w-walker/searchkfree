Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 70
Enter estimation parameters, or * for pre-computed parameters ([0.0935, 1.0971, 1.4205]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.78
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[70, 2.82513, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 30, 31]]
[70, 2.82143, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 30, 34]]
[70, 2.82244, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 31, 32]]
[70, 2.82121, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 31, 33]]
[70, 2.81991, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 32, 33]]
[70, 2.81874, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 32, 34]]
[70, 2.81751, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 33, 34]]
[70, 2.82226, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 30, 32]]
[70, 2.81987, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 30, 34]]
[70, 2.81835, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 32, 33]]
[70, 2.81718, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 32, 34]]
[70, 2.81595, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 33, 34]]
[70, 2.81702, [0, 1, 3, 4, 9, 10, 12, 13, 27, 30, 31, 34]]
[70, 2.81434, [0, 1, 3, 4, 9, 10, 12, 13, 27, 31, 32, 34]]
[70, 2.81311, [0, 1, 3, 4, 9, 10, 12, 13, 27, 31, 33, 34]]
[70, 2.81922, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 31, 32]]
[70, 2.81669, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 32, 33]]
[70, 2.81552, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 32, 34]]
[70, 2.81429, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 33, 34]]
[70, 2.81652, [0, 1, 3, 4, 9, 10, 12, 13, 28, 30, 31, 33]]
[70, 2.81282, [0, 1, 3, 4, 9, 10, 12, 13, 28, 30, 33, 34]]
[70, 2.81366, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 32, 33]]
[70, 2.81126, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 33, 34]]
[70, 2.79557, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 34, 53]]
[70, 2.81111, [0, 1, 3, 4, 9, 10, 12, 13, 29, 31, 32, 34]]
[70, 2.80842, [0, 1, 3, 4, 9, 10, 12, 13, 30, 31, 33, 34]]
[70, 2.79482, [0, 1, 3, 4, 9, 10, 12, 13, 30, 32, 33, 49]]
[70, 2.79243, [0, 1, 3, 4, 9, 10, 12, 13, 30, 33, 34, 49]]
[70, 2.79749, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 29, 31]]
[70, 2.79211, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 31, 33]]
[70, 2.79425, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27, 30, 31]]
[70, 2.79033, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27, 31, 33]]
[70, 2.78565, [0, 1, 3, 4, 9, 10, 12, 22, 25, 30, 31, 33]]
[70, 2.79127, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 29, 33]]
[70, 2.78843, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 31, 33]]
[70, 2.79214, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29, 31]]
[70, 2.78961, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29, 33]]
[70, 2.78676, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 31, 33]]
[70, 2.7889, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28, 30, 31]]
[70, 2.78499, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28, 31, 33]]
[70, 2.78178, [0, 1, 3, 4, 9, 10, 12, 25, 26, 28, 29, 34]]
[70, 2.83196, [0, 1, 3, 4, 9, 10, 12, 25, 26, 28, 32, 33, 59]]
[70, 2.83015, [0, 1, 3, 4, 9, 10, 12, 25, 27, 28, 32, 33, 59]]
[70, 2.7902, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28, 30, 31]]
[70, 2.7865, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28, 30, 34]]
[70, 2.7821, [0, 1, 3, 4, 9, 10, 13, 21, 24, 30, 31, 34]]
[70, 2.78446, [0, 1, 3, 4, 9, 10, 13, 21, 27, 28, 30, 31]]
[70, 2.78077, [0, 1, 3, 4, 9, 10, 13, 21, 27, 28, 30, 34]]
[70, 2.78611, [0, 1, 3, 4, 9, 10, 23, 25, 26, 30, 31, 33, 54]]
[70, 2.80383, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26, 30, 33]]
[70, 2.78714, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26, 30, 55]]
[70, 2.78536, [0, 1, 3, 4, 9, 11, 12, 16, 25, 27, 30, 55]]
[70, 2.78346, [0, 1, 3, 4, 9, 11, 12, 16, 26, 27, 30, 55]]
[70, 2.79507, [0, 1, 3, 4, 9, 11, 12, 16, 26, 27, 33, 34]]
[70, 2.79462, [0, 1, 3, 4, 9, 11, 12, 16, 27, 48, 52, 55, 57]]
[70, 2.78781, [0, 1, 3, 4, 9, 11, 12, 16, 34, 48, 50, 53, 55]]
[70, 2.80188, [0, 1, 3, 4, 10, 11, 14, 23, 26, 30, 31, 33, 54]]

Search completed in 0 hours, 0 minutes, and 0.854 seconds.  Enter a string to quit.