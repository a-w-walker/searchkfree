Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 126
Enter estimation parameters, or * for pre-computed parameters ([0.0805, 1.0694, 1.4001]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.85
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[126, 2.85869, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 32, 34, 38, 39, 57, 62, 103, 109]]
[126, 2.8577, [0, 1, 3, 4, 9, 10, 12, 13, 27, 30, 34, 39, 40, 43, 49, 61, 62, 108]]
[126, 2.85272, [0, 1, 3, 4, 9, 10, 12, 13, 27, 30, 34, 39, 40, 49, 52, 61, 62, 108]]
[126, 2.85675, [0, 1, 3, 4, 9, 10, 12, 13, 27, 32, 34, 39, 40, 43, 49, 57, 62, 108]]
[126, 2.86357, [0, 1, 3, 4, 9, 10, 12, 13, 27, 33, 35, 36, 38, 46, 47, 52, 55, 102]]
[126, 2.85331, [0, 1, 3, 4, 9, 10, 12, 13, 27, 34, 35, 39, 40, 47, 49, 52, 62, 108]]
[126, 2.86333, [0, 1, 3, 4, 9, 10, 12, 13, 28, 30, 38, 39, 41, 42, 49, 58, 61, 62]]
[126, 2.85864, [0, 1, 3, 4, 9, 10, 12, 13, 28, 36, 37, 40, 41, 48, 50, 51, 57, 58]]
[126, 2.85111, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 33, 35, 38, 39, 42, 44, 52]]
[126, 2.85385, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 34, 40, 42, 43, 53, 61, 62, 87]]
[126, 2.86459, [0, 1, 3, 4, 9, 10, 12, 13, 29, 32, 33, 39, 40, 42, 43, 50, 59, 98]]
[126, 2.8509, [0, 1, 3, 4, 9, 10, 12, 13, 29, 32, 37, 39, 40, 47, 50, 56, 59, 98]]
[126, 2.88924, [0, 1, 3, 4, 9, 10, 12, 13, 29, 32, 39, 40, 42, 43, 50, 53, 59, 62, 98]]
[126, 2.85074, [0, 1, 3, 4, 9, 10, 12, 13, 29, 32, 39, 40, 42, 43, 50, 53, 59, 98]]
[126, 2.87164, [0, 1, 3, 4, 9, 10, 12, 13, 29, 32, 39, 40, 42, 50, 53, 59, 62, 98, 101]]
[126, 2.85179, [0, 1, 3, 4, 9, 10, 12, 13, 29, 33, 34, 38, 41, 50, 52, 60, 61, 77]]
[126, 2.85877, [0, 1, 3, 4, 9, 10, 12, 13, 29, 33, 36, 38, 41, 42, 50, 52, 61, 77]]
[126, 2.86285, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 37, 38, 42, 43, 50, 52, 53, 59]]
[126, 2.86157, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 37, 38, 42, 43, 50, 52, 56, 59]]
[126, 2.86131, [0, 1, 3, 4, 9, 10, 12, 13, 30, 32, 38, 39, 41, 42, 49, 53, 58, 62]]
[126, 2.85993, [0, 1, 3, 4, 9, 10, 12, 13, 30, 32, 38, 39, 42, 43, 49, 53, 58, 62]]
[126, 2.86293, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 36, 39, 40, 43, 49, 53, 54, 61]]
[126, 2.86142, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 36, 40, 41, 43, 49, 53, 54, 61]]
[126, 2.85511, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 39, 40, 42, 43, 49, 53, 61, 62]]
[126, 2.85273, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 39, 40, 43, 45, 49, 54, 61, 62]]
[126, 2.85102, [0, 1, 3, 4, 9, 10, 12, 13, 30, 36, 38, 39, 41, 49, 53, 54, 58, 61]]
[126, 2.85472, [0, 1, 3, 4, 9, 10, 12, 13, 33, 34, 39, 40, 42, 43, 48, 49, 60, 61]]
[126, 2.87992, [0, 1, 3, 4, 9, 10, 12, 13, 35, 37, 38, 42, 43, 45, 50, 54, 56, 59, 79]]
[126, 2.87537, [0, 1, 3, 4, 9, 10, 12, 13, 35, 37, 38, 42, 45, 50, 51, 54, 56, 59, 79]]
[126, 2.86517, [0, 1, 3, 4, 9, 10, 12, 13, 37, 38, 42, 43, 45, 50, 54, 56, 59, 60, 79]]
[126, 2.85054, [0, 1, 3, 4, 9, 10, 12, 13, 38, 41, 43, 46, 47, 52, 55, 59, 60, 62, 102]]
[126, 2.85778, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26, 33, 37, 42, 44, 45, 56, 60, 61]]
[126, 2.85361, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26, 33, 37, 42, 44, 53, 56, 60, 61]]
[126, 2.86544, [0, 1, 3, 4, 9, 11, 12, 16, 27, 35, 40, 44, 46, 47, 49, 55, 56, 60, 62]]
[126, 2.8509, [0, 1, 3, 4, 9, 12, 13, 16, 27, 35, 40, 44, 46, 47, 49, 55, 56, 60, 62]]
[126, 2.85885, [0, 1, 3, 4, 10, 11, 13, 14, 29, 34, 37, 38, 41, 49, 51, 52, 56, 59, 86]]
[126, 2.85286, [0, 1, 3, 4, 10, 11, 13, 14, 29, 34, 38, 40, 43, 49, 50, 56, 59, 61, 81]]
[126, 2.85708, [0, 1, 3, 4, 10, 11, 14, 15, 23, 37, 39, 40, 44, 47, 52, 53, 56, 58, 61]]
[126, 2.85355, [0, 1, 3, 4, 10, 11, 14, 15, 23, 37, 39, 40, 44, 47, 52, 56, 58, 61, 62]]

Search completed in 0 hours, 35 minutes, and 25.814 seconds.  Enter a string to quit.