Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 46
Enter estimation parameters, or * for pre-computed parameters ([0.1087, 1.1141, 1.4635]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.6
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[46, 2.67743, [0, 1, 3, 4, 9, 10, 12, 13]]
[46, 2.63952, [0, 1, 3, 4, 9, 10, 12, 22]]
[46, 2.6105, [0, 1, 3, 4, 9, 10, 12, 41]]
[46, 2.63501, [0, 1, 3, 4, 9, 10, 13, 21]]
[46, 2.60416, [0, 1, 3, 4, 9, 10, 13, 40]]
[46, 2.62854, [0, 1, 3, 4, 9, 10, 31, 34, 41]]
[46, 2.65063, [0, 1, 3, 4, 9, 11, 12, 16]]
[46, 2.60346, [0, 1, 3, 4, 9, 11, 12, 38]]
[46, 2.61123, [0, 1, 3, 4, 9, 11, 16, 20]]
[46, 2.61888, [0, 1, 3, 4, 9, 11, 31, 36, 38]]
[46, 2.63491, [0, 1, 3, 4, 9, 12, 13, 16]]
[46, 2.62291, [0, 1, 3, 4, 9, 12, 13, 19]]
[46, 2.68075, [0, 1, 3, 4, 9, 12, 16, 19, 41]]
[46, 2.63196, [0, 1, 3, 4, 9, 12, 22, 33, 38]]
[46, 2.7025, [0, 1, 3, 4, 9, 13, 16, 20, 21]]
[46, 2.63816, [0, 1, 3, 4, 9, 16, 19, 21, 40]]
[46, 2.60564, [0, 1, 3, 4, 9, 16, 19, 40, 41]]
[46, 2.60428, [0, 1, 3, 4, 9, 19, 21, 30, 36]]
[46, 2.64198, [0, 1, 3, 4, 10, 11, 13, 14]]
[46, 2.63008, [0, 1, 3, 4, 10, 11, 14, 15]]
[46, 2.62797, [0, 1, 3, 4, 10, 12, 13, 15]]
[46, 2.61463, [0, 1, 3, 4, 10, 12, 13, 18]]
[46, 2.66109, [0, 1, 3, 4, 10, 12, 13, 32, 37]]
[46, 2.67078, [0, 1, 3, 4, 10, 13, 15, 18, 40]]
[46, 2.68292, [0, 1, 3, 4, 10, 14, 15, 21, 22]]
[46, 2.64135, [0, 1, 3, 4, 10, 14, 21, 22, 29]]
[46, 2.6205, [0, 1, 3, 4, 10, 14, 22, 29, 31]]
[46, 2.62194, [0, 1, 3, 4, 10, 18, 21, 22, 29]]
[46, 2.6011, [0, 1, 3, 4, 10, 18, 22, 29, 31]]
[46, 2.6117, [0, 1, 3, 4, 11, 12, 14, 15]]
[46, 2.64091, [0, 1, 3, 4, 11, 12, 14, 33, 39]]
[46, 2.6012, [0, 1, 3, 4, 11, 12, 15, 16]]
[46, 2.68775, [0, 1, 3, 4, 11, 12, 15, 17, 28]]
[46, 2.6343, [0, 1, 3, 4, 11, 12, 17, 28, 38]]
[46, 2.61968, [0, 1, 3, 4, 11, 12, 17, 38, 39]]
[46, 2.6037, [0, 1, 3, 4, 11, 12, 28, 32, 33]]
[46, 2.70963, [0, 1, 3, 4, 11, 13, 14, 16, 20]]
[46, 2.69428, [0, 1, 3, 4, 11, 13, 16, 17, 20]]
[46, 2.66381, [0, 1, 3, 4, 12, 13, 15, 19, 28]]
[46, 2.65419, [0, 1, 3, 4, 12, 13, 17, 19, 28]]
[46, 2.61767, [0, 1, 3, 4, 12, 13, 19, 28, 32]]
[46, 2.64853, [0, 1, 3, 4, 12, 14, 15, 17, 41]]
[46, 2.67046, [0, 1, 3, 4, 12, 14, 15, 19, 22]]
[46, 2.64075, [0, 1, 3, 4, 12, 14, 15, 19, 41]]
[46, 2.63307, [0, 1, 3, 4, 12, 14, 17, 19, 39]]
[46, 2.61602, [0, 1, 3, 4, 12, 14, 19, 22, 39]]
[46, 2.62996, [0, 1, 3, 4, 12, 15, 16, 19, 41]]
[46, 2.62491, [0, 1, 3, 4, 12, 15, 19, 22, 28]]
[46, 2.65737, [0, 1, 3, 4, 13, 14, 16, 20, 21]]
[46, 2.65212, [0, 1, 3, 4, 13, 14, 18, 19, 21]]
[46, 2.64875, [0, 1, 3, 4, 13, 14, 18, 20, 21]]
[46, 2.63105, [0, 1, 3, 4, 13, 14, 18, 20, 29]]
[46, 2.65165, [0, 1, 3, 4, 13, 15, 16, 20, 21]]
[46, 2.62028, [0, 1, 3, 4, 13, 15, 19, 21, 28]]
[46, 2.60638, [0, 1, 3, 4, 13, 16, 18, 21, 37]]
[46, 2.6347, [0, 1, 3, 4, 14, 15, 17, 21, 22]]
[46, 2.61016, [0, 1, 3, 4, 14, 15, 17, 21, 36]]
[46, 2.63, [0, 1, 3, 4, 14, 15, 19, 20, 22]]
[46, 2.60033, [0, 1, 3, 4, 14, 15, 19, 20, 41]]
[46, 2.62692, [0, 1, 3, 4, 14, 15, 19, 21, 22]]
[46, 2.60238, [0, 1, 3, 4, 14, 15, 19, 21, 36]]
[46, 2.62962, [0, 1, 3, 4, 14, 16, 17, 21, 22]]
[46, 2.62815, [0, 1, 3, 7, 8, 10, 18, 21, 22]]
[46, 2.60041, [0, 1, 3, 7, 8, 10, 21, 22, 29]]
[46, 2.6157, [0, 1, 3, 7, 8, 12, 18, 19, 22]]
[46, 2.60866, [0, 1, 3, 7, 8, 12, 19, 20, 22]]
[46, 2.61363, [0, 1, 3, 8, 11, 12, 17, 18, 39, 42]]
[46, 2.60501, [0, 1, 4, 5, 11, 12, 14, 33, 38, 39]]
[46, 2.60375, [0, 1, 4, 6, 9, 15, 19, 20, 22, 41]]
[46, 2.60236, [0, 1, 4, 6, 10, 15, 17, 21, 22, 35]]

Search completed in 0 hours, 0 minutes, and 0.053 seconds.  Enter a string to quit.