Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 65
Enter estimation parameters, or * for pre-computed parameters ([0.0956, 1.0984, 1.425]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.78
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[65, 2.85966, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 30, 31]]
[65, 2.8569, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 31, 32]]
[65, 2.85672, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 30, 32]]
[65, 2.83716, [0, 1, 3, 4, 9, 10, 12, 13, 27, 31, 32, 47]]
[65, 2.85359, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 31, 32]]
[65, 2.81639, [0, 1, 3, 4, 9, 10, 12, 13, 31, 32, 46, 47]]
[65, 2.80006, [0, 1, 3, 4, 9, 10, 12, 13, 31, 46, 47, 51]]
[65, 2.78417, [0, 1, 3, 4, 9, 10, 12, 13, 46, 47, 49, 50]]
[65, 2.78298, [0, 1, 3, 4, 9, 10, 12, 13, 46, 47, 50, 51]]
[65, 2.78293, [0, 1, 3, 4, 9, 10, 12, 13, 46, 48, 49, 51]]
[65, 2.78165, [0, 1, 3, 4, 9, 10, 12, 13, 47, 48, 50, 51]]
[65, 2.83141, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 29, 31]]
[65, 2.82808, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27, 30, 31]]
[65, 2.80254, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 31, 60]]
[65, 2.82592, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29, 31]]
[65, 2.80083, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 31, 60]]
[65, 2.82259, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28, 30, 31]]
[65, 2.80286, [0, 1, 3, 4, 9, 10, 12, 22, 27, 30, 31, 47]]
[65, 2.78211, [0, 1, 3, 4, 9, 10, 12, 22, 30, 31, 46, 47]]
[65, 2.79996, [0, 1, 3, 4, 9, 10, 12, 25, 26, 30, 31, 44]]
[65, 2.79862, [0, 1, 3, 4, 9, 10, 12, 25, 26, 30, 32, 44]]
[65, 2.78066, [0, 1, 3, 4, 9, 10, 12, 25, 26, 30, 44, 54]]
[65, 2.7972, [0, 1, 3, 4, 9, 10, 12, 25, 26, 31, 32, 44]]
[65, 2.81268, [0, 1, 3, 4, 9, 10, 12, 27, 31, 41, 47, 49, 60]]
[65, 2.82396, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28, 30, 31]]
[65, 2.81408, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28, 30, 40]]
[65, 2.81807, [0, 1, 3, 4, 9, 10, 13, 21, 27, 28, 30, 31]]
[65, 2.7859, [0, 1, 3, 4, 9, 10, 13, 29, 43, 46, 50, 51, 53]]
[65, 2.79239, [0, 1, 3, 4, 9, 10, 21, 22, 24, 25, 30, 31]]
[65, 2.7884, [0, 1, 3, 4, 9, 10, 21, 22, 24, 28, 29, 31]]
[65, 2.7869, [0, 1, 3, 4, 9, 10, 21, 22, 24, 28, 30, 31]]
[65, 2.7865, [0, 1, 3, 4, 9, 10, 21, 22, 25, 27, 30, 31]]
[65, 2.78101, [0, 1, 3, 4, 9, 10, 21, 22, 27, 28, 30, 31]]
[65, 2.78595, [0, 1, 3, 4, 9, 10, 21, 23, 24, 28, 29, 31]]
[65, 2.78444, [0, 1, 3, 4, 9, 10, 21, 23, 24, 28, 30, 31]]
[65, 2.81486, [0, 1, 3, 4, 9, 11, 20, 23, 24, 27, 32, 52, 57]]
[65, 2.79607, [0, 1, 3, 4, 9, 11, 20, 23, 24, 27, 52, 55, 57]]
[65, 2.80593, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 30, 31]]
[65, 2.80317, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 31, 32]]
[65, 2.78372, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 31, 57]]
[65, 2.78346, [0, 1, 3, 4, 9, 12, 13, 19, 27, 31, 32, 47]]
[65, 2.79821, [0, 1, 3, 4, 9, 13, 19, 21, 27, 31, 32, 47, 57]]
[65, 2.80686, [0, 1, 3, 4, 10, 11, 13, 14, 29, 31, 32, 37]]
[65, 2.78875, [0, 1, 3, 4, 10, 11, 13, 14, 31, 32, 37, 47]]
[65, 2.84257, [0, 1, 3, 4, 10, 11, 14, 15, 31, 32, 37, 44, 46]]
[65, 2.7976, [0, 1, 3, 4, 10, 12, 13, 18, 27, 28, 30, 31]]
[65, 2.80852, [0, 1, 3, 7, 8, 10, 18, 21, 22, 25, 27, 30, 31]]
[65, 2.78261, [0, 1, 4, 6, 9, 10, 13, 15, 23, 27, 28, 32, 34]]

Search completed in 0 hours, 0 minutes, and 1.033 seconds.  Enter a string to quit.