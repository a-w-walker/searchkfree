Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 47
Enter estimation parameters, or * for pre-computed parameters ([0.108, 1.1138, 1.4626]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.65
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[47, 2.66825, [0, 1, 3, 4, 9, 10, 12, 13]]
[47, 2.70397, [0, 1, 3, 4, 9, 10, 12, 22, 42]]
[47, 2.69064, [0, 1, 3, 4, 9, 10, 12, 32, 36]]
[47, 2.68463, [0, 1, 3, 4, 9, 10, 12, 32, 42]]
[47, 2.71186, [0, 1, 3, 4, 9, 10, 13, 21, 31]]
[47, 2.67064, [0, 1, 3, 4, 9, 10, 21, 23, 31]]
[47, 2.65003, [0, 1, 3, 4, 9, 10, 21, 31, 35]]
[47, 2.67594, [0, 1, 3, 4, 9, 11, 12, 33, 39]]
[47, 2.676, [0, 1, 3, 4, 9, 11, 16, 20, 41]]
[47, 2.65198, [0, 1, 3, 4, 9, 11, 20, 23, 41]]
[47, 2.71098, [0, 1, 3, 4, 9, 11, 23, 33, 34, 39]]
[47, 2.70331, [0, 1, 3, 4, 9, 11, 23, 33, 39, 41]]
[47, 2.68751, [0, 1, 3, 4, 9, 11, 33, 34, 37, 39]]
[47, 2.75186, [0, 1, 3, 4, 9, 12, 13, 29, 33, 39]]
[47, 2.66584, [0, 1, 3, 4, 9, 12, 13, 29, 39]]
[47, 2.65992, [0, 1, 3, 4, 9, 12, 13, 33, 39]]
[47, 2.66983, [0, 1, 3, 4, 9, 12, 16, 19, 42]]
[47, 2.66063, [0, 1, 3, 4, 9, 12, 16, 22, 42]]
[47, 2.69224, [0, 1, 3, 4, 9, 13, 16, 20, 21]]
[47, 2.65997, [0, 1, 3, 4, 9, 13, 16, 20, 41]]
[47, 2.66318, [0, 1, 3, 4, 9, 13, 16, 21, 35]]
[47, 2.65626, [0, 1, 3, 4, 9, 13, 19, 21, 31]]
[47, 2.70379, [0, 1, 3, 4, 9, 13, 21, 31, 35, 37]]
[47, 2.68577, [0, 1, 3, 4, 9, 13, 29, 31, 35, 37]]
[47, 2.68078, [0, 1, 3, 4, 9, 13, 29, 33, 35, 39]]
[47, 2.67437, [0, 1, 3, 4, 9, 13, 29, 33, 39, 41]]
[47, 2.67091, [0, 1, 3, 4, 10, 11, 13, 28, 33]]
[47, 2.6545, [0, 1, 3, 4, 10, 11, 13, 33, 41]]
[47, 2.72209, [0, 1, 3, 4, 10, 11, 14, 15, 23]]
[47, 2.67686, [0, 1, 3, 4, 10, 11, 15, 23, 28]]
[47, 2.66045, [0, 1, 3, 4, 10, 11, 15, 23, 41]]
[47, 2.65626, [0, 1, 3, 4, 10, 11, 15, 28, 35]]
[47, 2.70946, [0, 1, 3, 4, 10, 12, 13, 15, 28]]
[47, 2.69585, [0, 1, 3, 4, 10, 12, 13, 18, 28]]
[47, 2.68236, [0, 1, 3, 4, 10, 12, 13, 18, 38]]
[47, 2.66229, [0, 1, 3, 4, 10, 12, 13, 28, 33]]
[47, 2.67083, [0, 1, 3, 4, 10, 12, 15, 22, 28]]
[47, 2.73304, [0, 1, 3, 4, 10, 12, 18, 22, 28, 42]]
[47, 2.71921, [0, 1, 3, 4, 10, 12, 18, 22, 38, 42]]
[47, 2.70378, [0, 1, 3, 4, 10, 12, 18, 28, 40, 42]]
[47, 2.67629, [0, 1, 3, 4, 10, 13, 15, 18, 28]]
[47, 2.65988, [0, 1, 3, 4, 10, 13, 15, 18, 41]]
[47, 2.67281, [0, 1, 3, 4, 10, 14, 15, 21, 22]]
[47, 2.67022, [0, 1, 3, 4, 10, 14, 15, 21, 23]]
[47, 2.66741, [0, 1, 3, 4, 10, 14, 15, 22, 23]]
[47, 2.67761, [0, 1, 3, 4, 11, 12, 15, 17, 28]]
[47, 2.66311, [0, 1, 3, 4, 11, 12, 15, 17, 39]]
[47, 2.6993, [0, 1, 3, 4, 11, 13, 14, 16, 20]]
[47, 2.76151, [0, 1, 3, 4, 11, 13, 16, 17, 20, 41]]
[47, 2.65501, [0, 1, 3, 4, 11, 13, 16, 17, 35]]
[47, 2.70035, [0, 1, 3, 4, 11, 13, 17, 28, 35, 37]]
[47, 2.66313, [0, 1, 3, 4, 11, 14, 15, 20, 23]]
[47, 2.65809, [0, 1, 3, 4, 11, 14, 16, 20, 23]]
[47, 2.70721, [0, 1, 3, 4, 11, 14, 16, 23, 34, 40]]
[47, 2.65241, [0, 1, 3, 4, 11, 15, 16, 20, 23]]
[47, 2.68789, [0, 1, 3, 4, 11, 15, 17, 28, 35, 37]]
[47, 2.66044, [0, 1, 3, 4, 12, 14, 15, 19, 22]]
[47, 2.70102, [0, 1, 3, 4, 12, 14, 17, 18, 40, 42]]
[47, 2.67468, [0, 1, 3, 4, 12, 16, 18, 22, 38, 42]]
[47, 2.65465, [0, 1, 3, 4, 12, 17, 18, 28, 40, 42]]
[47, 2.70481, [0, 1, 3, 4, 14, 15, 17, 21, 22, 37]]
[47, 2.68165, [0, 1, 3, 4, 14, 16, 20, 22, 23, 38]]
[47, 2.65324, [0, 1, 3, 4, 14, 16, 20, 22, 38, 42]]
[47, 2.65314, [0, 1, 3, 4, 14, 16, 22, 23, 34, 38]]
[47, 2.68507, [0, 1, 3, 4, 14, 17, 18, 21, 23, 40]]
[47, 2.66409, [0, 1, 3, 4, 14, 17, 19, 22, 29, 42]]
[47, 2.67735, [0, 1, 3, 4, 15, 17, 18, 22, 23, 39]]
[47, 2.6872, [0, 1, 3, 7, 10, 12, 15, 16, 26, 28]]
[47, 2.66525, [0, 1, 3, 7, 10, 12, 15, 22, 26, 28]]
[47, 2.65324, [0, 1, 4, 5, 11, 14, 16, 19, 20, 25]]

Search completed in 0 hours, 0 minutes, and 0.082 seconds.  Enter a string to quit.