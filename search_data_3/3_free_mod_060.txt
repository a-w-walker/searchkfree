Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 60
Enter estimation parameters, or * for pre-computed parameters ([0.0983, 1.1038, 1.4321]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.7
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[60, 2.73863, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28]]
[60, 2.73704, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29]]
[60, 2.71967, [0, 1, 3, 4, 9, 10, 12, 13, 27, 46]]
[60, 2.73535, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29]]
[60, 2.71868, [0, 1, 3, 4, 9, 10, 12, 13, 28, 45]]
[60, 2.71782, [0, 1, 3, 4, 9, 10, 12, 13, 29, 44]]
[60, 2.70117, [0, 1, 3, 4, 9, 10, 12, 13, 44, 45]]
[60, 2.70047, [0, 1, 3, 4, 9, 10, 12, 13, 44, 46]]
[60, 2.79043, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 29]]
[60, 2.70759, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27]]
[60, 2.70431, [0, 1, 3, 4, 9, 10, 12, 22, 25, 29]]
[60, 2.7866, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 29]]
[60, 2.76351, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 55]]
[60, 2.78488, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29]]
[60, 2.70237, [0, 1, 3, 4, 9, 10, 12, 22, 26, 29]]
[60, 2.70215, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28]]
[60, 2.70057, [0, 1, 3, 4, 9, 10, 12, 22, 27, 29]]
[60, 2.77799, [0, 1, 3, 4, 9, 10, 12, 25, 26, 28, 29]]
[60, 2.75417, [0, 1, 3, 4, 9, 10, 12, 26, 27, 29, 47]]
[60, 2.73648, [0, 1, 3, 4, 9, 10, 12, 26, 27, 46, 47]]
[60, 2.73459, [0, 1, 3, 4, 9, 10, 12, 26, 29, 44, 47]]
[60, 2.71691, [0, 1, 3, 4, 9, 10, 12, 26, 44, 46, 47]]
[60, 2.73352, [0, 1, 3, 4, 9, 10, 12, 27, 29, 43, 47]]
[60, 2.71584, [0, 1, 3, 4, 9, 10, 12, 27, 43, 46, 47]]
[60, 2.71385, [0, 1, 3, 4, 9, 10, 12, 27, 43, 47, 49]]
[60, 2.71163, [0, 1, 3, 4, 9, 10, 12, 27, 46, 47, 49]]
[60, 2.71395, [0, 1, 3, 4, 9, 10, 12, 29, 43, 44, 47]]
[60, 2.70356, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28]]
[60, 2.74721, [0, 1, 3, 4, 9, 10, 21, 22, 24, 28, 29]]
[60, 2.74483, [0, 1, 3, 4, 9, 10, 21, 22, 26, 27, 29]]
[60, 2.72177, [0, 1, 3, 4, 9, 10, 21, 22, 26, 27, 55]]
[60, 2.74311, [0, 1, 3, 4, 9, 10, 21, 22, 26, 28, 29]]
[60, 2.74473, [0, 1, 3, 4, 9, 10, 21, 23, 24, 28, 29]]
[60, 2.71771, [0, 1, 3, 4, 9, 10, 21, 24, 28, 29, 43]]
[60, 2.72131, [0, 1, 3, 4, 9, 10, 22, 23, 26, 27, 47]]
[60, 2.71613, [0, 1, 3, 4, 9, 10, 22, 23, 27, 29, 47]]
[60, 2.70975, [0, 1, 3, 4, 9, 10, 22, 26, 27, 29, 47]]
[60, 2.71418, [0, 1, 3, 4, 9, 10, 23, 24, 28, 29, 41]]
[60, 2.7199, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26]]
[60, 2.71809, [0, 1, 3, 4, 9, 11, 12, 16, 25, 27]]
[60, 2.77894, [0, 1, 3, 4, 9, 11, 12, 16, 26, 27, 47]]
[60, 2.7681, [0, 1, 3, 4, 9, 11, 12, 25, 26, 28, 29]]
[60, 2.7266, [0, 1, 3, 4, 9, 11, 12, 26, 27, 46, 47]]
[60, 2.70704, [0, 1, 3, 4, 9, 11, 12, 26, 44, 46, 47]]
[60, 2.73975, [0, 1, 3, 4, 9, 11, 16, 20, 25, 26, 54]]
[60, 2.74011, [0, 1, 3, 4, 9, 11, 16, 20, 26, 27, 47]]
[60, 2.70151, [0, 1, 3, 4, 9, 11, 20, 23, 25, 38, 52]]
[60, 2.73438, [0, 1, 3, 4, 9, 12, 16, 22, 26, 27, 37]]
[60, 2.72142, [0, 1, 3, 4, 9, 12, 16, 22, 26, 27, 55]]
[60, 2.70103, [0, 1, 3, 4, 10, 12, 18, 22, 25, 29, 53]]
[60, 2.70354, [0, 1, 3, 4, 10, 14, 15, 21, 22, 36, 49]]
[60, 2.72082, [0, 1, 3, 4, 11, 12, 16, 17, 25, 26, 53]]
[60, 2.70979, [0, 1, 3, 4, 11, 12, 17, 25, 26, 28, 29]]
[60, 2.73733, [0, 1, 3, 4, 13, 14, 16, 17, 35, 36, 41, 42]]

Search completed in 0 hours, 0 minutes, and 0.244 seconds.  Enter a string to quit.