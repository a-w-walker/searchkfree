Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 68
Enter estimation parameters, or * for pre-computed parameters ([0.0943, 1.0984, 1.4224]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.77
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[68, 2.83818, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 30, 31]]
[68, 2.83547, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 31, 32]]
[68, 2.83422, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 31, 33]]
[68, 2.83291, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 32, 33]]
[68, 2.83529, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 30, 32]]
[68, 2.83133, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 32, 33]]
[68, 2.83221, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 31, 32]]
[68, 2.82965, [0, 1, 3, 4, 9, 10, 12, 13, 28, 29, 32, 33]]
[68, 2.82949, [0, 1, 3, 4, 9, 10, 12, 13, 28, 30, 31, 33]]
[68, 2.81059, [0, 1, 3, 4, 9, 10, 12, 13, 28, 32, 33, 49]]
[68, 2.82659, [0, 1, 3, 4, 9, 10, 12, 13, 29, 30, 32, 33]]
[68, 2.79058, [0, 1, 3, 4, 9, 10, 12, 13, 32, 33, 48, 49]]
[68, 2.77471, [0, 1, 3, 4, 9, 10, 12, 13, 32, 48, 49, 53]]
[68, 2.81031, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 29, 31]]
[68, 2.80488, [0, 1, 3, 4, 9, 10, 12, 22, 25, 26, 31, 33]]
[68, 2.80704, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27, 30, 31]]
[68, 2.80308, [0, 1, 3, 4, 9, 10, 12, 22, 25, 27, 31, 33]]
[68, 2.79835, [0, 1, 3, 4, 9, 10, 12, 22, 25, 30, 31, 33]]
[68, 2.80403, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 29, 33]]
[68, 2.80115, [0, 1, 3, 4, 9, 10, 12, 22, 26, 27, 31, 33]]
[68, 2.80491, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29, 31]]
[68, 2.80235, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 29, 33]]
[68, 2.79947, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 31, 33]]
[68, 2.77907, [0, 1, 3, 4, 9, 10, 12, 22, 26, 28, 31, 63]]
[68, 2.80163, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28, 30, 31]]
[68, 2.79768, [0, 1, 3, 4, 9, 10, 12, 22, 27, 28, 31, 33]]
[68, 2.79294, [0, 1, 3, 4, 9, 10, 12, 22, 28, 30, 31, 33]]
[68, 2.77538, [0, 1, 3, 4, 9, 10, 12, 22, 28, 31, 33, 49]]
[68, 2.79144, [0, 1, 3, 4, 9, 10, 12, 25, 26, 28, 32, 33]]
[68, 2.77359, [0, 1, 3, 4, 9, 10, 12, 25, 26, 28, 32, 57]]
[68, 2.7897, [0, 1, 3, 4, 9, 10, 12, 25, 26, 30, 31, 33]]
[68, 2.78838, [0, 1, 3, 4, 9, 10, 12, 25, 26, 30, 32, 33]]
[68, 2.78964, [0, 1, 3, 4, 9, 10, 12, 25, 27, 28, 32, 33]]
[68, 2.7718, [0, 1, 3, 4, 9, 10, 12, 25, 27, 28, 32, 57]]
[68, 2.80296, [0, 1, 3, 4, 9, 10, 13, 21, 24, 28, 30, 31]]
[68, 2.79717, [0, 1, 3, 4, 9, 10, 13, 21, 27, 28, 30, 31]]
[68, 2.78593, [0, 1, 3, 4, 9, 10, 13, 24, 27, 28, 31, 33]]
[68, 2.78304, [0, 1, 3, 4, 9, 10, 13, 24, 27, 29, 32, 33]]
[68, 2.7812, [0, 1, 3, 4, 9, 10, 13, 24, 28, 30, 31, 33]]
[68, 2.77831, [0, 1, 3, 4, 9, 10, 13, 24, 29, 30, 32, 33]]
[68, 2.77183, [0, 1, 3, 4, 9, 10, 21, 22, 24, 25, 30, 31]]
[68, 2.80898, [0, 1, 3, 4, 9, 10, 22, 23, 25, 29, 30, 32, 62]]
[68, 2.81672, [0, 1, 3, 4, 9, 11, 12, 16, 25, 26, 30, 33]]
[68, 2.78169, [0, 1, 3, 4, 9, 11, 12, 25, 26, 28, 32, 33]]
[68, 2.77995, [0, 1, 3, 4, 9, 11, 12, 25, 26, 30, 31, 33]]
[68, 2.77864, [0, 1, 3, 4, 9, 11, 12, 25, 26, 30, 32, 33]]
[68, 2.7799, [0, 1, 3, 4, 9, 11, 12, 25, 27, 28, 32, 33]]
[68, 2.78517, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 30, 31]]
[68, 2.78246, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 31, 32]]
[68, 2.78122, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 31, 33]]
[68, 2.7799, [0, 1, 3, 4, 9, 12, 13, 19, 27, 28, 32, 33]]
[68, 2.77648, [0, 1, 3, 4, 9, 12, 13, 19, 28, 30, 31, 33]]
[68, 2.79191, [0, 1, 3, 4, 10, 11, 13, 14, 29, 30, 32, 33]]
[68, 2.77694, [0, 1, 3, 4, 10, 12, 13, 18, 27, 28, 30, 31]]
[68, 2.78605, [0, 1, 3, 7, 8, 10, 18, 21, 22, 25, 27, 30, 31]]

Search completed in 0 hours, 0 minutes, and 0.839 seconds.  Enter a string to quit.