Enter an integer k for which our Kempner sets are k-free: 3
Enter a positive integer modulus b: 130
Enter estimation parameters, or * for pre-computed parameters ([0.0806, 1.0656, 1.4057]): *
Enter a threshold (e.g. 4.2) to determine printed output: 2.85
Enter a root for the search space (e.g. [0, 1, 2]) [or * for the root [0]]: *
Enter an upper bound for the size of allowable digit sets [or * to ignore]: *
Enter a maximal number of deviations from a greedy search [or * to ignore]: *
Searching for k-free sets mod b...

[130, 2.85929, [0, 1, 3, 4, 9, 10, 12, 13, 27, 28, 35, 39, 40, 59, 63, 64, 82, 94, 107]]
[130, 2.85688, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 33, 34, 38, 40, 52, 60, 61, 106]]
[130, 2.85427, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 35, 39, 40, 47, 52, 56, 62, 63]]
[130, 2.85093, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 36, 39, 47, 52, 56, 64, 106, 110, 113]]
[130, 2.86157, [0, 1, 3, 4, 9, 10, 12, 13, 27, 29, 39, 40, 47, 52, 56, 61, 63, 88, 106]]
[130, 2.85393, [0, 1, 3, 4, 9, 10, 12, 13, 27, 33, 34, 37, 38, 46, 48, 52, 60, 81]]
[130, 2.86307, [0, 1, 3, 4, 9, 10, 12, 13, 27, 36, 39, 40, 47, 49, 56, 57, 61, 64, 106]]
[130, 2.86019, [0, 1, 3, 4, 9, 10, 12, 13, 27, 36, 40, 43, 47, 49, 56, 57, 61, 64, 106]]
[130, 2.85712, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 60, 61, 106]]
[130, 2.85678, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 60, 62, 106]]
[130, 2.89392, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 61, 62, 64, 106]]
[130, 2.85643, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 61, 62, 106]]
[130, 2.85578, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 61, 64, 106]]
[130, 2.85543, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 57, 62, 64, 106]]
[130, 2.85396, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 56, 61, 62, 64, 106]]
[130, 2.85425, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 57, 60, 61, 64, 106]]
[130, 2.85356, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 57, 61, 62, 64, 106]]
[130, 2.85323, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 57, 61, 63, 64, 106]]
[130, 2.8521, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 49, 60, 61, 63, 64, 106]]
[130, 2.85035, [0, 1, 3, 4, 9, 10, 12, 13, 27, 39, 40, 46, 47, 56, 57, 61, 62, 64, 106]]
[130, 2.85247, [0, 1, 3, 4, 9, 10, 12, 13, 28, 30, 38, 39, 41, 42, 49, 58, 61, 62]]
[130, 2.8545, [0, 1, 3, 4, 9, 10, 12, 13, 28, 31, 33, 37, 39, 40, 48, 51, 60, 112]]
[130, 2.85067, [0, 1, 3, 4, 9, 10, 12, 13, 28, 33, 34, 37, 39, 48, 49, 51, 60, 80]]
[130, 2.85826, [0, 1, 3, 4, 9, 10, 12, 13, 29, 31, 35, 36, 42, 44, 47, 51, 56, 64]]
[130, 2.85198, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 37, 38, 42, 43, 50, 52, 53, 59]]
[130, 2.85071, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 37, 38, 42, 43, 50, 52, 56, 59]]
[130, 2.85463, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 39, 42, 50, 52, 56, 59, 63, 64, 110]]
[130, 2.85175, [0, 1, 3, 4, 9, 10, 12, 13, 29, 35, 42, 43, 50, 52, 56, 59, 63, 64, 110]]
[130, 2.86598, [0, 1, 3, 4, 9, 10, 12, 13, 29, 37, 39, 40, 42, 52, 53, 59, 60, 63, 82]]
[130, 2.85046, [0, 1, 3, 4, 9, 10, 12, 13, 30, 32, 38, 39, 41, 42, 49, 53, 58, 62]]
[130, 2.85206, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 36, 39, 40, 43, 49, 53, 54, 61]]
[130, 2.85057, [0, 1, 3, 4, 9, 10, 12, 13, 30, 34, 36, 40, 41, 43, 49, 53, 54, 61]]
[130, 2.85136, [0, 1, 3, 4, 9, 10, 12, 13, 33, 35, 36, 40, 48, 49, 51, 55, 64, 104, 111]]
[130, 2.85224, [0, 1, 3, 4, 9, 10, 12, 13, 34, 38, 40, 43, 45, 49, 54, 57, 61, 62, 106]]
[130, 2.86248, [0, 1, 3, 4, 9, 10, 12, 13, 34, 39, 40, 42, 48, 49, 52, 53, 60, 61, 63]]
[130, 2.85995, [0, 1, 3, 4, 9, 11, 12, 16, 25, 35, 37, 42, 43, 48, 52, 55, 57, 60, 64]]
[130, 2.85943, [0, 1, 3, 4, 9, 11, 12, 16, 26, 27, 39, 44, 46, 47, 56, 57, 59, 63, 64]]
[130, 2.85905, [0, 1, 3, 4, 9, 11, 12, 16, 26, 27, 39, 44, 46, 47, 56, 58, 59, 63, 64]]
[130, 2.85403, [0, 1, 3, 4, 9, 11, 12, 16, 27, 35, 40, 44, 46, 47, 49, 55, 56, 60, 62]]

Search completed in 0 hours, 54 minutes, and 42.301 seconds.  Enter a string to quit.